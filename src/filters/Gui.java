package filters;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JTextField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Borys
 */
public class Gui extends javax.swing.JFrame {

    private BufferedImage original;
    private BufferedImage filtered;
    private BufferedImage initial;
    private Processing processingUnit;
    private File f;
    private ArrayList<ArrayList<JTextField>> textFields;
    /**
     * Creates new form Gui
     */
    public Gui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        openImage = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        originalImg = new javax.swing.JPanel();
        filteredImg = new javax.swing.JPanel();
        inversion = new javax.swing.JButton();
        brightnes = new javax.swing.JSlider();
        contrast = new javax.swing.JSlider();
        refresh = new javax.swing.JButton();
        gamma = new javax.swing.JButton();
        blur = new javax.swing.JButton();
        gblur = new javax.swing.JButton();
        sharpen = new javax.swing.JButton();
        edges = new javax.swing.JButton();
        emboss = new javax.swing.JButton();
        matrix = new javax.swing.JPanel();
        offs = new javax.swing.JTextField();
        customFilter = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        divis = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dimensionX = new javax.swing.JTextField();
        dimensionY = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        kForMean = new javax.swing.JTextField();
        kMean = new javax.swing.JButton();
        randomDitheringButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Images Filtering");
        setBackground(new java.awt.Color(153, 255, 153));

        title.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Image filtering, NOT so easy :( !");
        title.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        title.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        title.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        openImage.setText("Open Image");
        openImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openImage(evt);
            }
        });

        jSplitPane1.setDividerLocation(501);
        jSplitPane1.setDividerSize(10);

        javax.swing.GroupLayout originalImgLayout = new javax.swing.GroupLayout(originalImg);
        originalImg.setLayout(originalImgLayout);
        originalImgLayout.setHorizontalGroup(
            originalImgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 499, Short.MAX_VALUE)
        );
        originalImgLayout.setVerticalGroup(
            originalImgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 387, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(originalImg);

        javax.swing.GroupLayout filteredImgLayout = new javax.swing.GroupLayout(filteredImg);
        filteredImg.setLayout(filteredImgLayout);
        filteredImgLayout.setHorizontalGroup(
            filteredImgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 517, Short.MAX_VALUE)
        );
        filteredImgLayout.setVerticalGroup(
            filteredImgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 387, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(filteredImg);

        inversion.setText("Inversion");
        inversion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inversionActionPerformed(evt);
            }
        });

        brightnes.setMaximum(255);
        brightnes.setMinimum(-255);
        brightnes.setPaintLabels(true);
        brightnes.setValue(0);
        brightnes.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brightnesStateChanged(evt);
            }
        });

        contrast.setMaximum(128);
        contrast.setMinimum(-128);
        contrast.setPaintLabels(true);
        contrast.setValue(0);
        contrast.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                contrastStateChanged(evt);
            }
        });

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        gamma.setText("Gamma correction");
        gamma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gammaActionPerformed(evt);
            }
        });

        blur.setText("Blur");
        blur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blurActionPerformed(evt);
            }
        });

        gblur.setText("Gaussian blur");
        gblur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gblurActionPerformed(evt);
            }
        });

        sharpen.setText("Sharpen");
        sharpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sharpenActionPerformed(evt);
            }
        });

        edges.setText("Edge detection");
        edges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgesActionPerformed(evt);
            }
        });

        emboss.setText("Emboss");
        emboss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                embossActionPerformed(evt);
            }
        });

        matrix.setLayout(new java.awt.BorderLayout());

        offs.setText("0");

        customFilter.setText("Show");
        customFilter.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        customFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customFilterActionPerformed(evt);
            }
        });

        jLabel1.setText("Offset");

        jLabel2.setText("Divisor");

        divis.setText("1");

        jLabel3.setText("Dimension X");

        dimensionX.setText("-1");

        dimensionY.setText("-1");

        jLabel4.setText("Dimension Y");

        jLabel5.setText("K-mean clustering");

        kForMean.setText("1");

        kMean.setText("Implement");
        kMean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kMeanActionPerformed(evt);
            }
        });

        randomDitheringButton.setText("Random dithering");
        randomDitheringButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomDitheringButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSplitPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(inversion)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(gamma))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(openImage)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(refresh)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(kForMean, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(kMean, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(randomDitheringButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                        .addGap(86, 86, 86))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(brightnes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(contrast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(blur)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(gblur)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(sharpen))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addGap(6, 6, 6)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(jLabel1)
                                                            .addGap(2, 2, 2)
                                                            .addComponent(offs, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(jLabel2)
                                                            .addGap(7, 7, 7)
                                                            .addComponent(divis))
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(jLabel3)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(dimensionX, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGap(2, 2, 2)
                                                            .addComponent(jLabel4)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(dimensionY, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGap(0, 12, Short.MAX_VALUE)))
                                                    .addGap(89, 89, 89))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(edges)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(emboss)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(customFilter))))
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addComponent(matrix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(title)
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(openImage)
                            .addComponent(refresh)
                            .addComponent(jLabel5))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inversion)
                            .addComponent(gamma)
                            .addComponent(kForMean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(kMean))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(blur)
                            .addComponent(gblur)
                            .addComponent(sharpen)
                            .addComponent(randomDitheringButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(edges)
                            .addComponent(emboss)
                            .addComponent(customFilter))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(offs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(divis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(dimensionX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dimensionY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(brightnes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(contrast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(matrix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openImage(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openImage
        // TODO add your handling code here:
        JFileChooser choice = new JFileChooser();
        final int opt = choice.showDialog(choice, null);
        if (opt != JFileChooser.APPROVE_OPTION) {
                return;
            }
        originalImg.removeAll();
        filteredImg.removeAll();
        f = choice.getSelectedFile();
        System.out.println("Opening image: "+f.getName());
        try {
            original = ImageIO.read(f);
            filtered = ImageIO.read(f);
            initial = original;
            changePic(originalImg,original);
            changePic(filteredImg,original);
            
//            System.out.println(this.getType());
            processingUnit = new Processing(1);
//            initial = processingUnit.getInitial(filtered);
        } catch (IOException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        addTextFields();
    }//GEN-LAST:event_openImage

    private void inversionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inversionActionPerformed
        // TODO add your handling code here:
        filteredImg.removeAll();
        filtered=processingUnit.inversion(filtered);
        original = filtered;
        changePic(filteredImg,filtered);
        System.out.println("Inversion performed!");
    }//GEN-LAST:event_inversionActionPerformed

    private void brightnesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brightnesStateChanged
        if(brcontr(brightnes,2)) System.out.println("Brightness was changed!");
    }//GEN-LAST:event_brightnesStateChanged

    private void contrastStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_contrastStateChanged
        if(brcontr(contrast,1)) System.out.println("Contrast was changed!");
    }//GEN-LAST:event_contrastStateChanged

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        filteredImg.removeAll();
        changePic(filteredImg,initial);
        original = takeNew();
        filtered = original;
        System.out.println("Refreshed");
    }//GEN-LAST:event_refreshActionPerformed

    private void gammaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gammaActionPerformed
        // TODO add your handling code here:
        if(brcontr(contrast,3)) System.out.println("Gamma correction was performed!");
    }//GEN-LAST:event_gammaActionPerformed

    private void blurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blurActionPerformed
        int divisor=9,dimy=3,dimx=3,offset=0;
        int[][] matrixx = {
            {1,1,1},
            {1,1,1},
            {1,1,1}
        };
        proceedWithFilters(offset,divisor,dimy,dimx,matrixx,1);
        System.out.println("Blur!");
    }//GEN-LAST:event_blurActionPerformed

    private void gblurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gblurActionPerformed
        int offset = 0, divisor=8,dimy=3,dimx=3;
        int[][] matrixx = {
            {0,1,0},
            {1,4,1},
            {0,1,0}
        };
        proceedWithFilters(offset,divisor,dimy,dimx,matrixx,1);
        System.out.println("Gaussian blur!");
    }//GEN-LAST:event_gblurActionPerformed

    private void sharpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sharpenActionPerformed
        int divisor=1,dimy=3,dimx=3,offset=0;
        int[][] matrixx = {
            {-1,-1,-1},
            {-1,9,-1},
            {-1,-1,-1}
        };
        proceedWithFilters(offset,divisor,dimy,dimx,matrixx,1);
        System.out.println("Sharpen filter!");
    }//GEN-LAST:event_sharpenActionPerformed

    private void edgesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgesActionPerformed
        int divisor=1,dimy=3,dimx=3,offset=127;
//        int[][] matrixx = {
//            {-1,-1,-1},
//            {-1,8,-1},
//            {-1,-1,-1}
//        };
        int[][] matrixx = {
            {0,0,0},
            {-1,1,0},
            {0,0,0}
        };
        proceedWithFilters(offset,divisor,dimy,dimx,matrixx,1);
        System.out.println("Edge detection!");
    }//GEN-LAST:event_edgesActionPerformed

    private void embossActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_embossActionPerformed
        int divisor=1,dimy=3,dimx=3,offset = 0;
        int[][] matrixx = {
            {-1,0,1},
            {-1,1,1},
            {-1,0,1}
        };
        proceedWithFilters(offset,divisor,dimy,dimx,matrixx,1);
        System.out.println("Emboss!");
    }//GEN-LAST:event_embossActionPerformed

    private void customFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customFilterActionPerformed
        int dimY=0,dimX=0,divisor=1,offset=0,diffy,diffx,divisorControl=0;
        int[][] matrixx;
        divisor=Integer.parseInt(divis.getText());
        if(divisor==0) divisor=1;
        offset=Integer.parseInt(offs.getText());
        dimY=Integer.parseInt(dimensionY.getText());
        dimX=Integer.parseInt(dimensionX.getText());
        if(dimX>0||dimY>0){
            System.out.println("Custom filter for given dimensions!");
        }
        else{
            System.out.println("Custom filter with automatic dimensions!");
            for(int i=0;i<textFields.size();i++){
                for(int j=0;j<textFields.size();j++){
                    int tmpDimX=0,tmpDimY=0;
                    if(Integer.parseInt(textFields.get(i).get(j).getText())!=0){
                        tmpDimX=Math.abs(((5-(j+1))*2)+1);
                        tmpDimY=Math.abs(((5-(i+1))*2)+1);
//                        System.out.println("Calculated dimensions: "+ tmpDimX+" - "+tmpDimY);
                        if(tmpDimX>dimX) dimX=tmpDimX;
                        if(tmpDimY>dimY) dimY=tmpDimY;
                    }
                }
            }
            System.out.println("Calculated dimensions: "+ dimX+" - "+dimY);
        }
        diffy = (9-dimY)/2;
        diffx = (9-dimX)/2;
        matrixx=new int[dimY][dimX];
        for(int i=0;i<dimY;i++){
            for(int j=0;j<dimX;j++){
                matrixx[i][j]=Integer.parseInt(textFields.get(i+diffy).get(j+diffx).getText());
                divisorControl+=matrixx[i][j];
                }
        }
        if(divisor!=divisorControl&&divisorControl!=0){
            System.out.println("Wrong divisor were given, calculating divisor...");
            divisor=divisorControl;
        }
        System.out.println("Custom filter matrix and parameters:");
        printMatrix(matrixx,dimY,dimX);
        System.out.println("Divisor: "+divisor+" Offset: "+offset);
        proceedWithFilters(offset,divisor,dimY,dimX,matrixx,0);
        System.out.println("Custom filter applied!");
    }//GEN-LAST:event_customFilterActionPerformed

    private void kMeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kMeanActionPerformed
        int k = Integer.parseInt((kForMean.getText()));
        if(k<=0) k=3;
        filteredImg.removeAll();
        original = takeNew();
        filtered=processingUnit.kMean(k,filtered,original);
        changePic(filteredImg,filtered);
    }//GEN-LAST:event_kMeanActionPerformed

    private void randomDitheringButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomDitheringButtonActionPerformed
        int k = Integer.parseInt((kForMean.getText()));
        if(k<=0) k=2;
        filteredImg.removeAll();
        original = takeNew();
        filtered=processingUnit.randomDithering(k,filtered,original);
        changePic(filteredImg,filtered);
    }//GEN-LAST:event_randomDitheringButtonActionPerformed
    private void changePic(JPanel panel, BufferedImage image){
        Image oimg= image.getScaledInstance(500, -1 , Image.SCALE_SMOOTH);
        ImageIcon oicon = new ImageIcon(oimg);
        JLabel originalLab = new JLabel(oicon);
        originalLab.setSize(oimg.getWidth(originalLab),oimg.getHeight(originalLab));
        panel.setSize(originalLab.getSize());
        panel.add(originalLab);
        panel.revalidate();
        panel.repaint();
    }
    private boolean brcontr(JSlider element, int type){
        if(!element.getValueIsAdjusting()){
            int value = element.getValue();
            filteredImg.removeAll();
            filtered = takeNew();
            if(type==1) filtered=processingUnit.changeContrast(value,filtered);
            else if(type==2) filtered=processingUnit.changeBrightness(value,filtered);
            else if(type==3){
                double val = 2;
                filtered=processingUnit.changeGamma(val,filtered);
            }
            changePic(filteredImg,filtered);
            return true;
        }
        else return false;
    }
    private BufferedImage takeNew(){
        BufferedImage image = null;
        try {
            image = ImageIO.read(f);
        } catch (IOException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        return image;
    }
    private void proceedWithFilters(int offset, int divisor,int dimy,int dimx, int[][] matrixx,int flag){
        filteredImg.removeAll();
        original = takeNew();
        filtered=processingUnit.filterng(offset,divisor,dimy,dimx,matrixx,filtered,original);
        if(flag==1) {
            displayMatrix(dimy,dimx,matrixx);
            setParams(offset,divisor,dimy,dimx);
        }
        changePic(filteredImg,filtered);
    }
    private void displayMatrix(int dimy,int dimx,int[][] matrixx){
        int diff = 3;
        for(int i=0;i<textFields.size();i++){
            for(int j=0;j<textFields.size();j++){
                textFields.get(i).get(j).setText("0");
            }
        }
        for(int i=0;i<dimy;i++){
            for(int j=0;j<dimx;j++){
                String num = String.valueOf(matrixx[i][j]);
                textFields.get(i+diff).get(j+diff).setText(num);
            }
        }
    }
    private void addTextFields() {
        matrix.removeAll();
        textFields = new ArrayList<>();
        Box mainBox = Box.createVerticalBox();
        for(int i=0;i<9;i++){
            ArrayList<JTextField> tmp = new ArrayList<>();
            Box panelBox = Box.createHorizontalBox();
            panelBox.setVisible(true);
            for(int j=0;j<9;j++){
                JTextField tmpText = new JTextField("0");
                if(i==4&&j==4) tmpText.setBackground(Color.BLUE);
                //tmpText.setVisible(true);
                panelBox.add(tmpText);
                tmp.add(tmpText);
            }
            textFields.add(tmp);
            mainBox.add(panelBox);
        }
        mainBox.setVisible(true);
        matrix.add(mainBox,"Center");
        matrix.revalidate();
        matrix.repaint();
        matrix.setVisible(true);
//        System.out.println(textFields.get(0).get(0).isShowing());
    }
    public void printMatrix(int[][] matrixx,int dimY,int dimX){
        for(int i=0;i<dimY;i++){
                for(int j=0;j<dimX;j++){
                    System.out.print(matrixx[i][j]);
                }
                System.out.println();
            }
    }
    public void setParams(int offset,int divisor,int dimY,int dimX){
        offs.setText(String.valueOf(offset));
        divis.setText(String.valueOf(divisor));
        dimensionY.setText(String.valueOf(dimY));
        dimensionX.setText(String.valueOf(dimX));
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton blur;
    private javax.swing.JSlider brightnes;
    private javax.swing.JSlider contrast;
    private javax.swing.JButton customFilter;
    private javax.swing.JTextField dimensionX;
    private javax.swing.JTextField dimensionY;
    private javax.swing.JTextField divis;
    private javax.swing.JButton edges;
    private javax.swing.JButton emboss;
    private javax.swing.JPanel filteredImg;
    private javax.swing.JButton gamma;
    private javax.swing.JButton gblur;
    private javax.swing.JButton inversion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField kForMean;
    private javax.swing.JButton kMean;
    private javax.swing.JPanel matrix;
    private javax.swing.JTextField offs;
    private javax.swing.JButton openImage;
    private javax.swing.JPanel originalImg;
    private javax.swing.JButton randomDitheringButton;
    private javax.swing.JButton refresh;
    private javax.swing.JButton sharpen;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

    
}
